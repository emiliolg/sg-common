apply plugin: 'idea'
idea {
    project {
        //if you want to set specific jdk and language level
        jdkName = '1.8'
        languageLevel = '1.8'
    }

    module {
        excludeDirs += file('target')
        excludeDirs += file('gradle')
    }
}





private boolean excludeCommonTest(Project p) {
    p.parent.name == "common" && p.name == "ext" || p.name == "env" || p.name == "core"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    group = "com.tekgenesis"

    ext.buildNumber = System.getProperty("suigen.build.number", "Working Copy")
    version = "3.0"
    ext.buildBranch = System.getProperty("suigen.build.branch", "Working Copy")
    if(buildBranch != "Working Copy") {
        if (buildBranch != "release") {
            version = "$version.$buildNumber-$buildBranch"
        } else version = "$version.$buildNumber"
    }

    compileJava {
        options.compilerArgs = ["-Xlint", "-Werror"]
    }
    compileTestJava {
        options.compilerArgs = ["-Xlint", "-Werror"]
    }

    configurations {
        all*.exclude module: 'slf4j-log4j12'
        all*.exclude module: 'org.slf4j'
        all*.exclude group: 'log4j'
        provided
    }
    idea {
        module {
            scopes.PROVIDED.plus += [configurations.provided]
            downloadJavadoc = true
            downloadSources = true
        }
    }

    repositories {
        mavenLocal()
        jcenter()
    }

    javadoc {
        failOnError false
        options.addStringOption("XlintDoc:none")
    }

    apply plugin: 'maven-publish'

    task javadocJar(type: Jar, dependsOn:javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
    }

    if (project.name != "common-gwt") {
        def artifactName = name == "common" ? "common" : "common-$project.name"

        publishing {
            publications {
                mavenJava(MavenPublication) {

                    from components.java
                    artifact sourceJar {
                        classifier "sources"
                    }
                    artifact javadocJar {
                        classifier "javadoc"
                    }
                }
            }
            repositories {
                add project.repositories.tekgenRepo
            }
        }
    }

    task listAllDependencies(type: DependencyReportTask) {}

    ext {
        annotations     = files('../ideaLibraries/annotations.jar')
        apacheShiro     = 'org.apache.shiro:shiro-core:1.2.0'
        junit           = 'junit:junit:4.12'
        assertj         = 'org.assertj:assertj-core:3.6.1'
        javaxInject     = 'javax.inject:javax.inject:1'
        logback_core    = 'ch.qos.logback:logback-core:1.1.6'
    	logback_classic = 'ch.qos.logback:logback-classic:1.1.6'
	    logback_gelf    = 'me.moocar:logback-gelf:0.12'
	    slf4j           = 'org.slf4j:slf4j-api:1.7.19'
	    slf4j_jdk14     = 'org.slf4j:slf4j-jdk14:1.7.5'
        jul_to_slf4j    = 'org.slf4j:jul-to-slf4j:1.7.5'
        jclOverSl4j     = 'org.slf4j:jcl-over-slf4j:1.7.12'
	    rxJava          = 'io.reactivex:rxjava:1.0.14'
	    simpleFramework = 'org.simpleframework:simple:4.1.21'
	    gwtDev        = 'com.google.gwt:gwt-dev:2.8.0'
	    gwtUser       = 'com.google.gwt:gwt-user:2.8.0'
	    jackson         = 'com.fasterxml.jackson.core:jackson-core:2.6.2'
        jacksonDataBind = 'com.fasterxml.jackson.core:jackson-databind:2.6.2'
	    jetty           = 'org.eclipse.jetty:jetty-server:9.2.14.v20151106'
        rxNetty         = 'io.reactivex:rxnetty:0.5.1'
	    webSocketClient = 'org.eclipse.jetty.websocket:websocket-client:9.2.14.v20151106'
        asyncHttpClient = 'com.ning:async-http-client:1.9.38'
    }

    dependencies {
        compile annotations
        testCompile junit
        if (!excludeCommonTest(project)) {
            testCompile project(':common-test')
        }
        testCompile assertj
    }
    buildDir = new File(rootProject.projectDir, "target/" +projectDir.parentFile.name+"/"+project.name)

    sourceSets {
        main {
            compileClasspath += configurations.provided
            output.resourcesDir = output.classesDir

            java {
                exclude '**/gwtonly/**'
            }
        }
        test {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
            output.resourcesDir = output.classesDir
        }
    }

    jar.doFirst {
        sourceSets.main.output.resourcesDir = "/dev/null2"
    }
    jar.doLast {
        sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir
    }



    def moduleName =  projectDir.parentFile.name+"-"+project.name
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
        destinationDir new File(rootProject.projectDir, "target/sources")
        archiveName  moduleName + "-src.jar"
    }

    artifacts {
        archives sourcesJar
    }

//    jar.archiveName = moduleName+".jar"
    idea {
        module {
            excludeDirs += file('src/main/java/tekgenesis/gwtonly')
            inheritOutputDirs = false
            outputDir = new File(buildDir, "classes/main")
            testOutputDir = new File(buildDir, "classes/test")
            sourceDirs +=   file('src/main/mm')
            sourceDirs +=   file('src_managed/main/mm')
            generatedSourceDirs +=   file('src_managed/main/mm')
            testSourceDirs +=   file('src/test/mm')
            testSourceDirs +=   file('src_managed/test/mm')
            generatedSourceDirs +=   file('src_managed/test/mm')
	        name = moduleName
        }
    }
//    version = buildVersion

    clean.doFirst {
        file(project.projectDir.absolutePath + "/src_managed").deleteDir()
    }
}


